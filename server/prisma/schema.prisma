// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Représente un utilisateur
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  // isVerified Boolean  @default(false)
  role      Role     @default(USER)
  refreshToken String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loginAt DateTime @default(now())

  profile UserProfile? // un profile appartient à un utilisateur unique

  project Project[]
  Tool Tool[]
  Location Location[]
}

// Représente le profil d'un utilisateur 
model UserProfile{
  id        String   @id @default(cuid())
  userId    String   @unique
  avatarUrl String?
  public_id String?
  darkMode  Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id]) // un utilisateur à un profile unique 
}

// Représente un projet 
model Project {
  id                  String   @id @default(cuid())
  userId              String
  projectName         String
  projectStatus       ProjectStatus @default(PLANNED)
  projectDescription  String
  projectImgUrl       String?
  projectPublicId     String?
  projectProgress     Int       @default(0)
  projectStartDate    DateTime
  projectEndDate      DateTime?
  projectBudget       Float
  createdAt           DateTime @default(now())

  user                User @relation(fields: [userId], references: [id] ,onDelete: Cascade)
}


// Représente un outil
model Tool{
  id                String   @id @default(cuid())
  userId            String  
  toolName          String 
  toolCategoryId    String
  toolDescription   String
  toolImageUrl      String
  toolPublicId      String
  locationId        String
  link              String? // représente le lien du produit sur le site d'acchat 
  toolStatus        ToolStatus @default(AVAILABLE)
  nbLoaning         Int
  toolPrice         Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User @relation(fields: [userId], references: [id]) // un outil appartient à un utilisateur
  category          Category @relation(fields: [toolCategoryId], references: [id]) // un outil appartient à une catégory d'outil
  location          Location @relation(fields: [locationId], references: [id]) // un outil appartient à un emplacement

  LoanCartItem    LoanCartItem[] // un tool peut apparaitre dans plusieurs LoanCartItem
}

// représente l'emplacement d'un outil
model Location {
  id      String @id @default(cuid())
  userId  String
  locationName String
  locationImgUrl  String?
  locationPublicId String?
  tools Tool[] // un emplacement peut contenir plusieurs outils

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // un emplacement appartient à un utilisateur
}


// représent la catégorie d'un outil
model Category{
  id                String   @id @default(cuid())
  categoryName      String

  tools Tool[]     // une catégory contient plusieurs outils 
}

// Représente un emprunteur 
model Borrower{
  id              String   @id @default(cuid())
  BorrowerName    String
  BorrowerAdress  String
  BorrowerTel     String
  createdAt       DateTime @default(now())
  Loan Loan[]
}


// représente un emprunt
model Loan{
  id                  String   @id @default(cuid())
  borrowerId          String
  items               LoanCartItem[]
  loanStatus          LoanStatus @default(IN_PROGRESS)
  loanDate            DateTime     @default(now())
  returnDate          DateTime?
  createdAt           DateTime @default(now())
  updateAt            DateTime @updatedAt

  Borrower                Borrower    @relation(fields: [borrowerId], references: [id]) // un emprunt concerne un emprunteur unique  
}

// répresente un item dans un emprunt
model LoanCartItem{
  id                  String    @id @default(cuid())
  toolId              String
  cartId              String
  itemStatus          LoanItemStatus @default(LOANED)
  LoanDate          DateTime         @default(now())
  returnDate          DateTime? // permet de gérer le cas ou parmi un emprunt de 3 outils 2 sont retournés, cela évite de casser le prêt  
  cart                Loan     @relation(fields: [cartId], references: [id], onDelete: Cascade) // un LoanCartItem appartient à un panier unique  
  tool                Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)  // un LoanCartItem concerne un outil unique
}



// --------------------------------------------------------------------------------------------------------------------------------//

enum Role {
  USER
  ADMIN
}

enum ToolStatus {
  AVAILABLE // disponible
  LOANED  // emprunté
  BROKEN    // cassé
  LOST      // perdu
}

enum LoanStatus {
  IN_PROGRESS // En cours
  RETURNED    // Retourné
  CANCELLED   // Annulé
}

enum LoanItemStatus {
  LOANED // Emprunté
  RETURNED // Retourné
  LOST     // Perdu
}

enum ProjectStatus {
  PLANNED      // planifié
  IN_PROGRESS  // en cours
  COMPLETED    //  Terminé
} 
