// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Repr√©sente un utilisateur
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  // isVerified Boolean  @default(false)
  role      Role     @default(USER)
  refreshToken String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  loginAt DateTime @default(now())

  profile UserProfile? // un profile appartient √† un utilisateur unique

  project Project[]
  Tool Tool[]
  Location Location[]
  Borrower Borrower[]

  Loan Loan[]
}

// Repr√©sente le profil d'un utilisateur 
model UserProfile{
  id        String   @id @default(cuid())
  userId    String   @unique
  avatarUrl String?
  public_id String?
  darkMode  Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // un utilisateur √† un profile unique 
}

// Repr√©sente un projet 
model Project {
  id                  String   @id @default(cuid())
  userId              String
  projectName         String
  projectStatus       ProjectStatus @default(PLANNED)
  projectDescription  String
  projectImgUrl       String?
  projectPublicId     String?
  projectProgress     Int       @default(0)
  projectStartDate    DateTime
  projectEndDate      DateTime?
  projectBudget       Float
  createdAt           DateTime @default(now())

  user                User @relation(fields: [userId], references: [id] ,onDelete: Cascade)

  @@index([userId, projectStatus])        // NOUVEAU : Projets par status
  @@index([userId, projectStartDate])     // NOUVEAU : Tri chronologique
  @@index([userId, createdAt])            // NOUVEAU : Projets r√©cents
  @@unique([id, userId])                 // Index unique composite pour la s√©curit√© multi-tenant
}


// Repr√©sente un outil
model Tool{
  id                String   @id @default(cuid())
  userId            String  
  toolName          String 
  toolCategoryId    String
  toolDescription   String
  toolImageUrl      String
  toolPublicId      String
  locationId        String
  link              String? // repr√©sente le lien du produit sur le site d'acchat 
  toolStatus        ToolStatus @default(AVAILABLE)
  nbLoaning         Int
  toolPrice         Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade) // un outil appartient √† un utilisateur
  category          Category @relation(fields: [toolCategoryId], references: [id]) // un outil appartient √† une cat√©gory d'outil
  location          Location @relation(fields: [locationId], references: [id], onDelete: Cascade) // un outil appartient √† un emplacement

  LoanItem    LoanItem[] // un tool peut apparaitre dans plusieurs LoanItem

  // üéØ Index principal : Couvre tous les patterns de filtrage
  @@index([userId, toolCategoryId, locationId, toolStatus, toolName])
  
  // üìä Index pour statistiques (optionnel)
  @@index([userId, nbLoaning])
}


// repr√©sente l'emplacement d'un outil
model Location {
  id      String @id @default(cuid())
  userId  String
  locationName String
  locationImgUrl  String?
  locationPublicId String?
  tools Tool[] // un emplacement peut contenir plusieurs outils

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // un emplacement appartient √† un utilisateur
  @@unique([id, userId])
}


// repr√©sent la cat√©gorie d'un outil
model Category{
  id                String   @id @default(cuid())
  categoryName      String

  tools Tool[]     // une cat√©gory contient plusieurs outils 
}

// Repr√©sente un emprunteur 
model Borrower{
  id              String   @id @default(cuid())
  userId          String
  firstName       String
  lastName        String
  address          String // dans le futur cr√©er une table pivot contenant les information sur le lieu d'habitation du borrower
  phone           String
  email           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Loan Loan[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // un emprunteur appartient √† un utilisateur
  
  @@index([userId, firstName,lastName]) 
  @@unique([id, userId]) //  Index unique composite
}


// repr√©sente un emprunt
model Loan{
  id                  String      @id @default(cuid())
  userId              String
  borrowerId          String
  loanStatus          LoanStatus      @default(IN_PROGRESS)
  loanDate            DateTime     @default(now())
  returnDate          DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  loanItems           LoanItem[] 
  borrower            Borrower    @relation(fields: [borrowerId], references: [id], onDelete: Cascade) // un emprunt concerne un emprunteur unique  
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade) // un emprunt appartient √† un utilisateur


  @@index([userId, borrowerId, loanStatus])
  @@index([userId,borrowerId])
  @@unique([id, userId]) // Index unique composite pour la s√©curit√© multi-tenant
}

// r√©presente un item dans un emprunt
model LoanItem{
  id                  String    @id @default(cuid())
  toolId              String
  loanId              String
  itemStatus          LoanItemStatus @default(TO_BE_BORROWED)
  loanDate            DateTime         @default(now())
  returnDate          DateTime? // permet de g√©rer le cas ou parmi un emprunt de 3 outils 2 sont retourn√©s, cela √©vite de casser le pr√™t  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  loan                Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade) // un LoanCartItem appartient √† un panier unique  
  tool                Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)  // un LoanCartItem concerne un outil unique

  @@index([loanId])              // Items d'un emprunt
  @@index([toolId])              // Historique d'un outil
  @@index([loanId, itemStatus])  // Items retourn√©s/en cours
  @@index([toolId, itemStatus])  // V√©rifier si outil emprunt√©
}



// --------------------------------------------------------------------------------------------------------------------------------//

enum Role {
  USER
  ADMIN
}

enum ToolStatus {
  AVAILABLE // disponible
  BORROWED // emprunt√©
  RESERVED  // r√©serv√©
  LOST      // perdu
  DAMAGED   // endommag√©
  MAINTENANCE // en maintenance
}

enum LoanStatus {
  IN_PROGRESS // En cours
  PARTIALLY_RETURNED // Partiellement retourn√©, c'est lorsqu'un outil parmis un emprunt est retourn√©
  COMPLETED    // Retourn√©
  CANCELLED   // Annul√©
}

enum LoanItemStatus {
  TO_BE_BORROWED // Emprunt√©
  RETURNED // Retourn√©
  LOST     // Perdu
}

enum ProjectStatus {
  PLANNED      // planifi√©
  IN_PROGRESS  // en cours
  COMPLETED    //  Termin√©
} 
